<?php

namespace Tests\Unit\UseCase\Genre;

use Core\Domain\Repository\GenreRepositoryInterface;
use Core\UseCase\DTO\Genre\Delete\DeleteGenreOutputDto;
use Core\UseCase\DTO\Genre\GenreInputDto;
use Core\UseCase\Genre\DeleteGenreUseCase;
use Mockery;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;
use stdClass;

class DeleteGenreUseCaseUnitTest extends TestCase
{

    public function test_delete()
    {
        $this->mockRepo = Mockery::mock(stdClass::class, GenreRepositoryInterface::class);
        $this->mockRepo->shouldReceive('delete')->andReturn(true);

        $useCase = new DeleteGenreUseCase($this->mockRepo);

        $this->mockInputDto = Mockery::mock(GenreInputDto::class,[
            (string)Uuid::uuid4()
        ]);

        $response = $useCase->execute($this->mockInputDto);

        $this->assertInstanceOf(DeleteGenreOutputDto::class,$response);
        $this->assertTrue($response->success);
    }

    public function test_delete_returns_false()
    {
        $this->mockRepo = Mockery::mock(stdClass::class, GenreRepositoryInterface::class);
        $this->mockRepo->shouldReceive('delete')->andReturn(false);

        $useCase = new DeleteGenreUseCase($this->mockRepo);

        $this->mockInputDto = Mockery::mock(GenreInputDto::class,[
            (string)Uuid::uuid4()
        ]);

        $response = $useCase->execute($this->mockInputDto);

        $this->assertFalse($response->success);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
